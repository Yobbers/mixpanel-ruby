var search_data = {"index":{"searchIndex":["mixpanel","bufferedconsumer","connectionerror","consumer","errorhandler","events","groups","mixpanelerror","people","servererror","tracker","alias()","append()","clear_charges()","config_http()","delete_group()","delete_user()","flush()","generate_tracking_url()","handle()","import()","import()","increment()","new()","new()","new()","new()","new()","new()","plus_one()","remove()","request()","send()","send()","send!()","send!()","set()","set()","set_once()","set_once()","track()","track()","track_charge()","union()","union()","unset()","unset()","update()","update()","readme"],"longSearchIndex":["mixpanel","mixpanel::bufferedconsumer","mixpanel::connectionerror","mixpanel::consumer","mixpanel::errorhandler","mixpanel::events","mixpanel::groups","mixpanel::mixpanelerror","mixpanel::people","mixpanel::servererror","mixpanel::tracker","mixpanel::tracker#alias()","mixpanel::people#append()","mixpanel::people#clear_charges()","mixpanel::config_http()","mixpanel::groups#delete_group()","mixpanel::people#delete_user()","mixpanel::bufferedconsumer#flush()","mixpanel::tracker#generate_tracking_url()","mixpanel::errorhandler#handle()","mixpanel::events#import()","mixpanel::tracker#import()","mixpanel::people#increment()","mixpanel::bufferedconsumer::new()","mixpanel::consumer::new()","mixpanel::events::new()","mixpanel::groups::new()","mixpanel::people::new()","mixpanel::tracker::new()","mixpanel::people#plus_one()","mixpanel::groups#remove()","mixpanel::consumer#request()","mixpanel::bufferedconsumer#send()","mixpanel::consumer#send()","mixpanel::bufferedconsumer#send!()","mixpanel::consumer#send!()","mixpanel::groups#set()","mixpanel::people#set()","mixpanel::groups#set_once()","mixpanel::people#set_once()","mixpanel::events#track()","mixpanel::tracker#track()","mixpanel::people#track_charge()","mixpanel::groups#union()","mixpanel::people#union()","mixpanel::groups#unset()","mixpanel::people#unset()","mixpanel::groups#update()","mixpanel::people#update()",""],"info":[["Mixpanel","","Mixpanel.html","",""],["Mixpanel::BufferedConsumer","","Mixpanel/BufferedConsumer.html","","<p>BufferedConsumer buffers messages in memory, and sends messages as a batch.\nThis can improve performance, …\n"],["Mixpanel::ConnectionError","","Mixpanel/ConnectionError.html","",""],["Mixpanel::Consumer","","Mixpanel/Consumer.html","","<p>A Consumer receives messages from a Mixpanel::Tracker, and sends them\nelsewhere- probably to Mixpanel&#39;s …\n"],["Mixpanel::ErrorHandler","","Mixpanel/ErrorHandler.html","","<p>The default behavior of the gem is to silence all errors thrown in the\nconsumer.  If you wish to handle …\n"],["Mixpanel::Events","","Mixpanel/Events.html","","<p>Handles formatting Mixpanel event tracking messages and sending them to the\nconsumer. Mixpanel::Tracker …\n"],["Mixpanel::Groups","","Mixpanel/Groups.html","","<p>Handles formatting Mixpanel group updates and sending them to the consumer.\nYou will rarely need to instantiate …\n"],["Mixpanel::MixpanelError","","Mixpanel/MixpanelError.html","","<p>Mixpanel specific errors that are thrown in the gem. In the default\nconsumer we catch all errors and …\n"],["Mixpanel::People","","Mixpanel/People.html","","<p>Handles formatting Mixpanel profile updates and sending them to the\nconsumer. You will rarely need to …\n"],["Mixpanel::ServerError","","Mixpanel/ServerError.html","",""],["Mixpanel::Tracker","","Mixpanel/Tracker.html","","<p>Use Mixpanel::Tracker to track events and profile updates in your\napplication. To track an event, call …\n"],["alias","Mixpanel::Tracker","Mixpanel/Tracker.html#method-i-alias","(alias_id, real_id, events_endpoint=nil)","<p>Creates a distinct_id alias. Events and updates with an alias will be\nconsidered by mixpanel to have …\n"],["append","Mixpanel::People","Mixpanel/People.html#method-i-append","(distinct_id, properties, ip=nil, optional_params={})","<p>Appends a values to the end of list-valued properties. If the given\nproperties don&#39;t exist, a new …\n"],["clear_charges","Mixpanel::People","Mixpanel/People.html#method-i-clear_charges","(distinct_id, ip=nil, optional_params={})","<p>Clear all charges from a Mixpanel people profile\n"],["config_http","Mixpanel","Mixpanel.html#method-c-config_http","(&block)","<p>This method exists for backwards compatibility. The preferred way to\ncustomize or configure the HTTP …\n"],["delete_group","Mixpanel::Groups","Mixpanel/Groups.html#method-i-delete_group","(group_key, group_id, optional_params={})","<p>Permanently delete a group from Mixpanel groups analytics (all group\nproperties on events stay)\n"],["delete_user","Mixpanel::People","Mixpanel/People.html#method-i-delete_user","(distinct_id, optional_params={})","<p>Permanently delete a profile from Mixpanel people analytics To delete a\nuser and ignore alias pass into …\n"],["flush","Mixpanel::BufferedConsumer","Mixpanel/BufferedConsumer.html#method-i-flush","()","<p>Pushes all remaining messages in the buffer to Mixpanel. You should call\n#flush before your application …\n"],["generate_tracking_url","Mixpanel::Tracker","Mixpanel/Tracker.html#method-i-generate_tracking_url","(distinct_id, event, properties={}, endpoint=nil)","<p>A call to #generate_tracking_url will return a formatted url for pixel\nbased tracking.  #generate_tracking_url …\n"],["handle","Mixpanel::ErrorHandler","Mixpanel/ErrorHandler.html#method-i-handle","(error)","<p>Override #handle to customize error handling\n"],["import","Mixpanel::Events","Mixpanel/Events.html#method-i-import","(api_key, distinct_id, event, properties={}, ip=nil)","<p>Imports an event that has occurred in the past, along with a distinct_id\nrepresenting the source of that …\n"],["import","Mixpanel::Tracker","Mixpanel/Tracker.html#method-i-import","(api_key, distinct_id, event, properties={}, ip=nil)","<p>A call to #import is to import an event occurred in the past. #import takes\na distinct_id representing …\n"],["increment","Mixpanel::People","Mixpanel/People.html#method-i-increment","(distinct_id, properties, ip=nil, optional_params={})","<p>Changes the value of properties by a numeric amount.  Takes a hash with\nstring keys and numeric properties. …\n"],["new","Mixpanel::BufferedConsumer","Mixpanel/BufferedConsumer.html#method-c-new","(events_endpoint=nil, update_endpoint=nil, import_endpoint=nil, max_buffer_length=MAX_LENGTH, &block)","<p>Create a Mixpanel::BufferedConsumer. If you provide endpoint arguments,\nthey will be used instead of …\n"],["new","Mixpanel::Consumer","Mixpanel/Consumer.html#method-c-new","(events_endpoint=nil, update_endpoint=nil, groups_endpoint=nil, import_endpoint=nil)","<p>Create a Mixpanel::Consumer. If you provide endpoint arguments, they will\nbe used instead of the default …\n"],["new","Mixpanel::Events","Mixpanel/Events.html#method-c-new","(token, error_handler=nil, &block)","<p>You likely won&#39;t need to instantiate an instance of Mixpanel::Events\ndirectly. The best way to get …\n"],["new","Mixpanel::Groups","Mixpanel/Groups.html#method-c-new","(token, error_handler=nil, &block)","<p>You likely won&#39;t need to instantiate instances of Mixpanel::Groups\ndirectly. The best way to get …\n"],["new","Mixpanel::People","Mixpanel/People.html#method-c-new","(token, error_handler=nil, &block)","<p>You likely won&#39;t need to instantiate instances of Mixpanel::People\ndirectly. The best way to get …\n"],["new","Mixpanel::Tracker","Mixpanel/Tracker.html#method-c-new","(token, error_handler=nil, &block)","<p>Takes your Mixpanel project token, as a string.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tracker</span> = <span class=\"ruby-constant\">Mixpanel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Tracker</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-constant\">YOUR_MIXPANEL_TOKEN</span>)\n</pre>\n<p>By …\n"],["plus_one","Mixpanel::People","Mixpanel/People.html#method-i-plus_one","(distinct_id, property_name, ip=nil, optional_params={})","<p>Convenience method- increases the value of a numeric property by one.\nCalling #plus_one(distinct_id, …\n"],["remove","Mixpanel::Groups","Mixpanel/Groups.html#method-i-remove","(group_key, group_id, properties, ip=nil, optional_params={})","<p>Removes a specific value in a list property\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tracker</span> = <span class=\"ruby-constant\">Mixpanel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Tracker</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-constant\">YOUR_MIXPANEL_TOKEN</span>)\n\n<span class=\"ruby-comment\"># removes ...</span>\n</pre>\n"],["request","Mixpanel::Consumer","Mixpanel/Consumer.html#method-i-request","(endpoint, form_data)","<p>Request takes an endpoint HTTP or HTTPS url, and a Hash of data to post to\nthat url. It should return …\n"],["send","Mixpanel::BufferedConsumer","Mixpanel/BufferedConsumer.html#method-i-send","(type, message)","<p>This method was deprecated in release 2.0.0, please use send! instead\n"],["send","Mixpanel::Consumer","Mixpanel/Consumer.html#method-i-send","(type, message)","<p>This method was deprecated in release 2.0.0, please use send! instead\n"],["send!","Mixpanel::BufferedConsumer","Mixpanel/BufferedConsumer.html#method-i-send-21","(type, message)","<p>Stores a message for Mixpanel in memory. When the buffer hits a maximum\nlength, the consumer will flush …\n"],["send!","Mixpanel::Consumer","Mixpanel/Consumer.html#method-i-send-21","(type, message)","<p>Send the given string message to Mixpanel. Type should be one of :event,\n:profile_update or :import, …\n"],["set","Mixpanel::Groups","Mixpanel/Groups.html#method-i-set","(group_key, group_id, properties, ip=nil, optional_params={})","<p>Sets properties on a group record. Takes a Hash with string keys, and\nvalues that are strings, numbers, …\n"],["set","Mixpanel::People","Mixpanel/People.html#method-i-set","(distinct_id, properties, ip=nil, optional_params={})","<p>Sets properties on a user record. Takes a Hash with string keys, and values\nthat are strings, numbers, …\n"],["set_once","Mixpanel::Groups","Mixpanel/Groups.html#method-i-set_once","(group_key, group_id, properties, ip=nil, optional_params={})","<p>set_once works just like #set, but will only change the value of properties\nif they are not already present …\n"],["set_once","Mixpanel::People","Mixpanel/People.html#method-i-set_once","(distinct_id, properties, ip=nil, optional_params={})","<p>set_once works just like #set, but will only change the value of properties\nif they are not already present …\n"],["track","Mixpanel::Events","Mixpanel/Events.html#method-i-track","(distinct_id, event, properties={}, ip=nil)","<p>Notes that an event has occurred, along with a distinct_id representing the\nsource of that event (for …\n"],["track","Mixpanel::Tracker","Mixpanel/Tracker.html#method-i-track","(distinct_id, event, properties={}, ip=nil)","<p>A call to #track is a report that an event has occurred.  #track takes a\ndistinct_id representing the …\n"],["track_charge","Mixpanel::People","Mixpanel/People.html#method-i-track_charge","(distinct_id, amount, properties={}, ip=nil, optional_params={})","<p>Records a payment to you to a profile. Charges recorded with #track_charge\nwill appear in the Mixpanel …\n"],["union","Mixpanel::Groups","Mixpanel/Groups.html#method-i-union","(group_key, group_id, properties, ip=nil, optional_params={})","<p>Set union on list valued properties. Associates a list containing all\nelements of a given list, and all …\n"],["union","Mixpanel::People","Mixpanel/People.html#method-i-union","(distinct_id, properties, ip=nil, optional_params={})","<p>Set union on list valued properties. Associates a list containing all\nelements of a given list, and all …\n"],["unset","Mixpanel::Groups","Mixpanel/Groups.html#method-i-unset","(group_key, group_id, properties, ip=nil, optional_params={})","<p>Removes properties and their values from a group.\n\n<pre>tracker = Mixpanel::Tracker.new(YOUR_MIXPANEL_TOKEN) ...</pre>\n"],["unset","Mixpanel::People","Mixpanel/People.html#method-i-unset","(distinct_id, properties, ip=nil, optional_params={})","<p>Removes properties and their values from a profile.\n\n<pre>tracker = Mixpanel::Tracker.new(YOUR_MIXPANEL_TOKEN) ...</pre>\n"],["update","Mixpanel::Groups","Mixpanel/Groups.html#method-i-update","(message)","<p>Send a generic update to Mixpanel groups analytics. Caller is responsible\nfor formatting the update message, …\n"],["update","Mixpanel::People","Mixpanel/People.html#method-i-update","(message)","<p>Send a generic update to Mixpanel people analytics. Caller is responsible\nfor formatting the update message, …\n"],["Readme","","Readme_rdoc.html","","<p><img src=\"https://travis-ci.org/mixpanel/mixpanel-ruby.svg?branch=master\"\nalt=\"Build Status\" />\n<p>mixpanel-ruby: …\n"]]}}